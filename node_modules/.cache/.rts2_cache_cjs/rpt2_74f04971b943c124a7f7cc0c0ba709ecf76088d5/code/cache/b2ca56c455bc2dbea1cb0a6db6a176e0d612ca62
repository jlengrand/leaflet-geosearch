{"code":"/* eslint-disable @typescript-eslint/camelcase */\r\nimport AbstractProvider, { RequestType, } from './provider';\r\nexport default class OpenStreetMapProvider extends AbstractProvider {\r\n    constructor(options = {}) {\r\n        super(options);\r\n        const host = 'https://nominatim.openstreetmap.org';\r\n        this.searchUrl = options.searchUrl || `${host}/search`;\r\n        this.reverseUrl = options.reverseUrl || `${host}/reverse`;\r\n    }\r\n    endpoint({ query, type }) {\r\n        const params = typeof query === 'string' ? { q: query } : query;\r\n        params.format = 'json';\r\n        switch (type) {\r\n            case RequestType.REVERSE:\r\n                return this.getUrl(this.reverseUrl, params);\r\n            default:\r\n                return this.getUrl(this.searchUrl, params);\r\n        }\r\n    }\r\n    parse(response) {\r\n        const records = Array.isArray(response.data)\r\n            ? response.data\r\n            : [response.data];\r\n        return records.map((r) => ({\r\n            x: Number(r.lon),\r\n            y: Number(r.lat),\r\n            label: r.display_name,\r\n            bounds: [\r\n                [parseFloat(r.boundingbox[0]), parseFloat(r.boundingbox[2])],\r\n                [parseFloat(r.boundingbox[1]), parseFloat(r.boundingbox[3])],\r\n            ],\r\n            raw: r,\r\n        }));\r\n    }\r\n}\r\n//# sourceMappingURL=openStreetMapProvider.js.map","references":["/Users/julienlengrand-lambert/Developer/leaflet-geosearch/src/providers/provider.ts","/Users/julienlengrand-lambert/Developer/leaflet-geosearch/src/lib/hasShape.ts"],"map":"{\"version\":3,\"file\":\"openStreetMapProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/providers/openStreetMapProvider.ts\"],\"names\":[],\"mappings\":\"AAAA,iDAAiD;AACjD,OAAO,gBAAgB,EAAE,EAIvB,WAAW,GAEZ,MAAM,YAAY,CAAC;AAyBpB,MAAM,CAAC,OAAO,OAAO,qBAAsB,SAAQ,gBAGlD;IAIC,YAAY,UAAwC,EAAE;QACpD,KAAK,CAAC,OAAO,CAAC,CAAC;QAEf,MAAM,IAAI,GAAG,qCAAqC,CAAC;QACnD,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,GAAG,IAAI,SAAS,CAAC;QACvD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,GAAG,IAAI,UAAU,CAAC;IAC5D,CAAC;IAED,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAoB;QACxC,MAAM,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QAChE,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;QAEvB,QAAQ,IAAI,EAAE;YACZ,KAAK,WAAW,CAAC,OAAO;gBACtB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAE9C;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;SAC9C;IACH,CAAC;IAED,KAAK,CAAC,QAAsC;QAC1C,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC1C,CAAC,CAAC,QAAQ,CAAC,IAAI;YACf,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEpB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACzB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;YAChB,KAAK,EAAE,CAAC,CAAC,YAAY;YACrB,MAAM,EAAE;gBACN,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5D,CAAC,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;aAC7D;YACD,GAAG,EAAE,CAAC;SACP,CAAC,CAAC,CAAC;IACN,CAAC;CACF\"}","dts":{"name":"/Users/julienlengrand-lambert/Developer/leaflet-geosearch/providers/openStreetMapProvider.d.ts","writeByteOrderMark":false,"text":"import AbstractProvider, { EndpointArgument, ParseArgument, ProviderOptions, SearchResult } from './provider';\r\nexport declare type RequestResult = RawResult[];\r\nexport interface RawResult {\r\n    place_id: string;\r\n    license: string;\r\n    osm_type: string;\r\n    osm_id: number;\r\n    boundingbox: [string, string, string, string];\r\n    lat: string;\r\n    lon: string;\r\n    display_name: string;\r\n    class: string;\r\n    type: string;\r\n    importance: number;\r\n    icon?: string;\r\n}\r\nexport declare type OpenStreetMapProviderOptions = {\r\n    searchUrl?: string;\r\n    reverseUrl?: string;\r\n} & ProviderOptions;\r\nexport default class OpenStreetMapProvider extends AbstractProvider<RawResult[], RawResult> {\r\n    searchUrl: string;\r\n    reverseUrl: string;\r\n    constructor(options?: OpenStreetMapProviderOptions);\r\n    endpoint({ query, type }: EndpointArgument): string;\r\n    parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[];\r\n}\r\n"}}
