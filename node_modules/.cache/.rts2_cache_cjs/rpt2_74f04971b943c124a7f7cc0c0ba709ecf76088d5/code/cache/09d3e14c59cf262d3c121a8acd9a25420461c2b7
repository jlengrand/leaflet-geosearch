{"code":"import AbstractProvider from './provider';\r\nimport { createScriptElement } from '../domUtils';\r\nexport default class BingProvider extends AbstractProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.searchUrl = 'https://dev.virtualearth.net/REST/v1/Locations';\r\n    }\r\n    endpoint({ query, jsonp }) {\r\n        const params = typeof query === 'string' ? { q: query } : query;\r\n        params.jsonp = jsonp;\r\n        return this.getUrl(this.searchUrl, params);\r\n    }\r\n    parse(response) {\r\n        if (response.data.resourceSets.length === 0) {\r\n            return [];\r\n        }\r\n        return response.data.resourceSets[0].resources.map((r) => ({\r\n            x: r.point.coordinates[1],\r\n            y: r.point.coordinates[0],\r\n            label: r.address.formattedAddress,\r\n            bounds: [\r\n                [r.bbox[0], r.bbox[1]],\r\n                [r.bbox[2], r.bbox[3]],\r\n            ],\r\n            raw: r,\r\n        }));\r\n    }\r\n    async search({ query }) {\r\n        const jsonp = `BING_JSONP_CB_${Date.now()}`;\r\n        const json = await createScriptElement(this.endpoint({ query, jsonp }), jsonp);\r\n        return this.parse({ data: json });\r\n    }\r\n}\r\n//# sourceMappingURL=bingProvider.js.map","references":["/Users/julienlengrand-lambert/Developer/leaflet-geosearch/src/providers/provider.ts","/Users/julienlengrand-lambert/Developer/leaflet-geosearch/src/domUtils.ts"],"map":"{\"version\":3,\"file\":\"bingProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/providers/bingProvider.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,gBAKN,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,mBAAmB,EAAE,MAAM,aAAa,CAAC;AAwClD,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,gBAGzC;IAHD;;QAIE,cAAS,GAAG,gDAAgD,CAAC;IAmC/D,CAAC;IAjCC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAwC;QAC7D,MAAM,MAAM,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QAChE,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;QAErB,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;IAED,KAAK,CAAC,QAAsC;QAC1C,IAAI,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3C,OAAO,EAAE,CAAC;SACX;QAED,OAAO,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACzD,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YACzB,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YACzB,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,gBAAgB;YACjC,MAAM,EAAE;gBACN,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACvB;YACD,GAAG,EAAE,CAAC;SACP,CAAC,CAAC,CAAC;IACN,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,EAAkB;QACpC,MAAM,KAAK,GAAG,iBAAiB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;QAC5C,MAAM,IAAI,GAAG,MAAM,mBAAmB,CACpC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAC/B,KAAK,CACN,CAAC;QAEF,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IACpC,CAAC;CACF\"}","dts":{"name":"/Users/julienlengrand-lambert/Developer/leaflet-geosearch/providers/bingProvider.d.ts","writeByteOrderMark":false,"text":"import AbstractProvider, { EndpointArgument, ParseArgument, SearchArgument, SearchResult } from './provider';\r\nexport interface RequestResult {\r\n    authenticationResultCode: string;\r\n    brandLogoUri: string;\r\n    copyright: string;\r\n    resourceSets: {\r\n        estimatedTotal: number;\r\n        resources: RawResult[];\r\n    }[];\r\n    statusCode: number;\r\n    statusDescription: string;\r\n    traceId: string;\r\n}\r\nexport interface RawResult {\r\n    __type: string;\r\n    bbox: [number, number, number, number];\r\n    name: string;\r\n    point: {\r\n        type: 'Point';\r\n        coordinates: [number, number];\r\n    };\r\n    address: {\r\n        adminDistrict: string;\r\n        adminDistrict2: string;\r\n        countryRegion: string;\r\n        formattedAddress: string;\r\n        locality: string;\r\n    };\r\n    confidence: string;\r\n    entityType: string;\r\n    geocodePoints: [{\r\n        type: 'Point';\r\n        coordinates: [number, number];\r\n        calculationMethod: string;\r\n        usageTypes: string[];\r\n    }];\r\n    matchCodes: string[];\r\n}\r\nexport default class BingProvider extends AbstractProvider<RequestResult, RawResult> {\r\n    searchUrl: string;\r\n    endpoint({ query, jsonp }: EndpointArgument & {\r\n        jsonp: string;\r\n    }): string;\r\n    parse(response: ParseArgument<RequestResult>): SearchResult<RawResult>[];\r\n    search({ query }: SearchArgument): Promise<SearchResult<RawResult>[]>;\r\n}\r\n"}}
